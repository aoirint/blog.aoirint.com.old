<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>えやみぐさ</title><link href="https://blog.aoirint.com/" rel="alternate"></link><link href="https://blog.aoirint.com/atom.xml" rel="self"></link><id>https://blog.aoirint.com/</id><updated>2021-06-05T01:30:00+09:00</updated><entry><title>npm startで構文エラーが消えないときの対処</title><link href="https://blog.aoirint.com/entry/2021/npm_start_reset_cache/" rel="alternate"></link><published>2021-06-05T01:30:00+09:00</published><updated>2021-06-05T01:30:00+09:00</updated><id>tag:blog.aoirint.com,2021-06-05 01:30:00.000000:/entry/2021/npm_start_reset_cache/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2021_npm_start_reset_cache_index_md_npm_startで構文エラーが消えないときの対処"&gt;npm startで構文エラーが消えないときの対処&lt;/h1&gt;
&lt;p&gt;npm startで構文エラーが消えなくなることがある。&lt;/p&gt;
&lt;p&gt;npm startでサーバを起動してコードの変更を監視したままの状態で、gitでブランチを切り替えたときキャッシュが正しく更新されないことが原因と思われる。&lt;/p&gt;
&lt;p&gt;キャッシュを破棄するには、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm start -- --reset-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kt3k/items/758c4f3595ffd7e74f9f"&gt;https://qiita.com/kt3k/items/758c4f3595ffd7e74f9f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>npm startでError: ENOENT: no such file or directory ... .steampathで起動しないときの対処</title><link href="https://blog.aoirint.com/entry/2021/npm_start_enoent_steampath/" rel="alternate"></link><published>2021-06-05T01:30:00+09:00</published><updated>2021-06-05T01:30:00+09:00</updated><id>tag:blog.aoirint.com,2021-06-05 01:30:00.000000:/entry/2021/npm_start_enoent_steampath/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2021_npm_start_enoent_steampath_index_md_npm_startでError_ENOENT_no_such_file_or_directory_steampathで起動しないときの対処"&gt;npm startでError: ENOENT: no such file or directory ... .steampathで起動しないときの対処&lt;/h1&gt;
&lt;p&gt;gitでブランチを切り替えて依存関係に差分が生じたとき、
node_modulesを修正していないときに起きる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Error: ENOENT: no such file or directory, stat '/home/USER/.steampath'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;package-lock.jsonがあれば、
package-lock.jsonに基づいて依存関係をインストールする&lt;code&gt;npm ci&lt;/code&gt;を実行する。&lt;/p&gt;
&lt;p&gt;実行時に&lt;/p&gt;</summary></entry><entry><title>Wiki.jsのセットアップ</title><link href="https://blog.aoirint.com/entry/2021/wikijs/" rel="alternate"></link><published>2021-06-01T05:00:00+09:00</published><updated>2021-06-01T05:00:00+09:00</updated><id>tag:blog.aoirint.com,2021-06-01 05:00:00.000000:/entry/2021/wikijs/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2021_wikijs_index_md_Wiki_jsのセットアップ"&gt;Wiki.jsのセットアップ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://js.wiki/get-started"&gt;https://js.wiki/get-started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gigazine.net/news/20201003-wiki-js/"&gt;無料とは思えない多機能っぷりなWikiインフラ「Wiki.js」レビュー、自前でホスト＆外部サービスと連携可能 - GIGAZINE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="md_header_block" id="h_entry_2021_wikijs_index_md_メモリ消費量"&gt;メモリ消費量&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ docker stats
CONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O           BLOCK I/O         PIDS
e225b6b77209   wikijs_wiki_1   &lt;span class="m"&gt;0&lt;/span&gt;.01%     &lt;span class="m"&gt;127&lt;/span&gt;.6MiB / &lt;span class="m"&gt;7&lt;/span&gt;.681GiB   &lt;span class="m"&gt;1&lt;/span&gt;.62%     &lt;span class="m"&gt;13&lt;/span&gt;.1MB / &lt;span class="m"&gt;22&lt;/span&gt;.7MB   &lt;span class="m"&gt;44&lt;/span&gt;.5MB / &lt;span class="m"&gt;1&lt;/span&gt;.45MB&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>GitLab CI, DockerイメージをビルドしてContainer Registryにpushする</title><link href="https://blog.aoirint.com/entry/2021/gitlab_ci_docker_registry/" rel="alternate"></link><published>2021-05-29T02:00:00+09:00</published><updated>2021-05-29T02:00:00+09:00</updated><id>tag:blog.aoirint.com,2021-05-29 02:00:00.000000:/entry/2021/gitlab_ci_docker_registry/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2021_gitlab_ci_docker_registry_index_md_GitLab_CI_DockerイメージをビルドしてContainer_Registryにpushする"&gt;GitLab CI, DockerイメージをビルドしてContainer Registryにpushする&lt;/h1&gt;
&lt;h2 class="md_header_block" id="h_entry_2021_gitlab_ci_docker_registry_index_md_リポジトリ構造"&gt;リポジトリ構造&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.gitlab-ci.yml&lt;/li&gt;
&lt;li&gt;app/&lt;ul&gt;
&lt;li&gt;Dockerfile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="md_header_block" id="h_entry_2021_gitlab_ci_docker_registry_index_md__gitlab_ci_yml"&gt;.gitlab-ci.yml&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;

&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build&lt;/span&gt;
  &lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker:20.10&lt;/span&gt;
  &lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker:dind&lt;/span&gt;
  &lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;$CI_COMMIT_BRANCH == "main"&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_P&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>ロータリエンコーダ付きステッピングモータをArduinoで制御して角度を取得する</title><link href="https://blog.aoirint.com/entry/2020/stepping_motor/" rel="alternate"></link><published>2020-10-06T07:00:00+09:00</published><updated>2021-05-14T01:50:00+09:00</updated><id>tag:blog.aoirint.com,2020-10-06 07:00:00.000000:/entry/2020/stepping_motor/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2020_stepping_motor_index_md_ロータリエンコーダ付きステッピングモータをArduinoで制御して角度を取得する"&gt;ロータリエンコーダ付きステッピングモータをArduinoで制御して角度を取得する&lt;/h1&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_stepping_motor_index_md_機材"&gt;機材&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arduino UNO（中華）&lt;/li&gt;
&lt;li&gt;ロータリエンコーダ付きステッピングモータ&lt;ul&gt;
&lt;li&gt;PKP214U06A-R2EL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.orientalmotor.co.jp/products/detail.action?hinmei=PKP214U06A-R2EL-L"&gt;PKP214U06A-R2EL-L｜PKPシリーズ／PKシリーズ｜ステッピングモーター｜オリエンタルモーター株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;モータ部説明書（PDF、HM-7433J.pdf）&lt;/li&gt;
&lt;li&gt;ロータリエンコーダ部説明書（PDF、HM-7439JE.pdf）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.orientalmotor.co.jp/file_addon/products/st/image/tj_pkp214u06a-r2el-l_d.gif"&gt;特性図（画像）&lt;/a&gt;（DC24V駆動時）&lt;/li&gt;
&lt;li&gt;モータ部&lt;ul&gt;
&lt;li&gt;2相&lt;/li&gt;
&lt;li&gt;ユニポーラ5本リード線&lt;/li&gt;
&lt;li&gt;基本ステップ角度1.8°&lt;/li&gt;
&lt;li&gt;AC 50&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary></entry><entry><title>GPU PC (Desktop) のセットアップメモ</title><link href="https://blog.aoirint.com/entry/2020/gpu_pc_setup/" rel="alternate"></link><published>2020-09-18T20:00:00+09:00</published><updated>2021-05-14T01:00:00+09:00</updated><id>tag:blog.aoirint.com,2020-09-18 20:00:00.000000:/entry/2020/gpu_pc_setup/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2020_gpu_pc_setup_index_md_GPU_PC_Desktop_のセットアップメモ"&gt;GPU PC (Desktop) のセットアップメモ&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://releases.ubuntu.com/18.04.5/" title="Ubuntu 18.04.5 LTS (Bionic Beaver)"&gt;Ubuntu 18.04.5 LTS (Bionic Beaver)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu 18.04、Windows 10のデュアルブート環境を構築する。
プロキシ下を想定しているので、不要な場合は適宜調整。&lt;/p&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_gpu_pc_setup_index_md_時刻ずれの解消"&gt;時刻ずれの解消&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://linux.just4fun.biz/?Linux%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/%E3%83%87%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%96%E3%83%BC%E3%83%88%E3%81%AEWindows%E6%99%82%E5%88%BB%E3%82%92UTC%E3%81%AB%E3%81%99%E3%82%8B" title="Linux環境設定/デュアルブートのWindows時刻をUTCにする - Linuxと過ごす"&gt;Linux環境設定/デュアルブートのWindows時刻をUTCにする - Linuxと過ごす&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;デュアルブート環境では、BIOSの時刻を介してWindows側の時刻管理（ローカル時間）とUbuntu側の時刻管理（UTC時間）が衝突して、タイムゾーンの時差分、時計がずれてしま&lt;/p&gt;</summary></entry><entry><title>Atom Text Editor Setup</title><link href="https://blog.aoirint.com/entry/2021/atom_setup/" rel="alternate"></link><published>2021-05-14T01:00:00+09:00</published><updated>2021-05-14T01:00:00+09:00</updated><id>tag:blog.aoirint.com,2021-05-14 01:00:00.000000:/entry/2021/atom_setup/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2021_atom_setup_index_md_Atom_Text_Editor_Setup"&gt;Atom Text Editor Setup&lt;/h1&gt;
&lt;p&gt;GitHubが開発するElectron製高機能テキストエディタAtomをセットアップする。&lt;/p&gt;
&lt;h2 class="md_header_block" id="h_entry_2021_atom_setup_index_md_Installation"&gt;Installation&lt;/h2&gt;
&lt;h3 class="md_header_block" id="h_entry_2021_atom_setup_index_md_macOS_Windows"&gt;macOS, Windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://atom.io/"&gt;https://atom.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class="md_header_block" id="h_entry_2021_atom_setup_index_md_Ubuntu"&gt;Ubuntu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flight-manual.atom.io/getting-started/sections/installing-atom/#platform-linux"&gt;https://flight-manual.atom.io/getting-started/sections/installing-atom/#platform-linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey &lt;span class="p"&gt;|&lt;/span&gt; sudo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Atom + LaTeX in Docker</title><link href="https://blog.aoirint.com/entry/2020/atom_latex_docker/" rel="alternate"></link><published>2020-09-17T08:35:00+09:00</published><updated>2021-05-14T01:00:00+09:00</updated><id>tag:blog.aoirint.com,2020-09-17 08:35:00.000000:/entry/2020/atom_latex_docker/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2020_atom_latex_docker_index_md_Atom_LaTeX_in_Docker"&gt;Atom + LaTeX in Docker&lt;/h1&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_atom_latex_docker_index_md_概要"&gt;概要&lt;/h2&gt;
&lt;p&gt;LaTeXをホストにインストールせず、Docker内で動かしつつ、
Atomからこれを利用できるようにする。&lt;/p&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_atom_latex_docker_index_md_Requirements"&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu 18.04&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;li&gt;Atom Packages&lt;ul&gt;
&lt;li&gt;&lt;a href="https://atom.io/packages/latex"&gt;latex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_atom_latex_docker_index_md_Atom_Packages"&gt;Atom Packages&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://atom.io/packages/latex"&gt;latex&lt;/a&gt;を入れれば最低限ビルドコマンドは叩けるようになる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://atom.io/packages/latex"&gt;latex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;シンタックスハイライト&lt;ul&gt;
&lt;li&gt;&lt;a href="https://atom.io/packages/language-latex"&gt;language-latex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;アウトライン表示&lt;ul&gt;
&lt;li&gt;&lt;a href="https://atom.io/packages/document-outline"&gt;document-outline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PDFプレビュー&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;pdf-view&lt;/a&gt;（メモリリーク? Atomを一度閉じれば解消&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary></entry><entry><title>arduino-cliの使い方</title><link href="https://blog.aoirint.com/entry/2020/arduino_cli_usage/" rel="alternate"></link><published>2020-11-09T08:00:00+09:00</published><updated>2021-05-09T17:30:00+09:00</updated><id>tag:blog.aoirint.com,2020-11-09 08:00:00.000000:/entry/2020/arduino_cli_usage/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2020_arduino_cli_usage_index_md_arduino_cliの使い方"&gt;arduino-cliの使い方&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ arduino-cli version
arduino-cli Version: 0.13.0 Commit: 693a045
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_arduino_cli_usage_index_md_インストール"&gt;インストール&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arduino.github.io/arduino-cli/latest/installation/"&gt;Installation - Arduino CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/arduino/arduino-cli"&gt;arduino/arduino-cli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://arduino.github.io/arduino-cli/latest/"&gt;Arduino CLIの公式ドキュメント&lt;/a&gt;に従ってインストールする。後述する&lt;code&gt;screen&lt;/code&gt;コマンドも合わせてインストールする。
&lt;code&gt;arduino-cli&lt;/code&gt;はDockerイメージも配布されているのでお好みで。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -fsSL https://raw.githubusercontent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Open JTalk in Docker</title><link href="https://blog.aoirint.com/entry/2021/open_jtalk/" rel="alternate"></link><published>2021-04-04T08:00:00+09:00</published><updated>2021-04-04T08:00:00+09:00</updated><id>tag:blog.aoirint.com,2021-04-04 08:00:00.000000:/entry/2021/open_jtalk/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2021_open_jtalk_index_md_Open_JTalk_in_Docker"&gt;Open JTalk in Docker&lt;/h1&gt;
&lt;p&gt;以前にもOpen JTalkを触っていたが、時間が経った＆記事が雑だったのでDockerでまとめ直しておく。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aoirint.hatenablog.com/entry/2019/05/25/080329"&gt;Open JTalk - aoirint's note&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dockerfileを作る。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;ubuntu:bionic&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    apt-get install -y &lt;span class="se"&gt;\&lt;/span&gt;
        open-jtalk &lt;span class="se"&gt;\&lt;/span&gt;
        open-jtalk-mecab-naist-jdic &lt;span class="se"&gt;\&lt;/span&gt;
        hts-voice-nitech-jp-atr503-m001

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /data&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"op&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>